h1. Search module

 **Search** モジュールは JPA モデルに対して全文検索機能を提供します。Lucene をベースにしているため、Lucene のインデックスを格納するためのファイルシステムが必要になります。 

h2. <a> モジュールの有効化 </a>

 **/conf/application.conf** に次の行を追記してモジュールを有効化します。

bc. # The search module
module.search=${play.path}/modules/search

h2. <a> オブジェクトのインデックス作成 </a>

 **あなたが作成した Model** に対して **@Indexed** アノテーションを付与します。次にインデックスしたいフィールドに対して **@Field** アノテーションを付与します。

bc. @Indexed
public class Folder extends Model {
    @Field
    @Column(unique=true)
    public Integer poseidonNumber; 
    @Field
    public String object;

 現状、 **@Field** アノテーションはプリミティブ型のみをサポートしています。

h2. <a> オブジェクトの検索 </a>

**Search** ヘルパーを使ってクエリを構築します。:

bc. Search.search("object:dogs", Folder.class)

第一引数には Lucene のクエリ、第二引数には Model クラスを渡します。ここでLuceneのドキュメントを参照したくなるかもしれません。 **Search** モジュールはクラス毎に分割された形でインデックスを管理します。 **@Field** を付与されたプロパティは Lucene のフィールドとして追加していきます。

Search.search は微調整可能な形でクエリオブジェクトを返します。:

bc. Query q = Search.search("object:dogs", Folder.class);
q.orderBy("object")
    .page(2,5)
    .reverse();
    

クエリを終了する際に **Model** オブジェクトを抽出したい場合、下記のようにしてください。:

bc. List<Folder> folders = q.fetch();
    

id のみ取得したい場合は下記のようにしてください。（JPA クエリの例を示します）:

bc. List<Long> folderIds = q.fetchIds();
    

すべての情報を取得したい場合（例えば relevance の情報など）、下記のようにしてください。:

bc. List<QueryResult> results = q.executeQuery();
    

h2. <a> インデックスの管理 </a>

**Model** クラスを create/update/delete するたびに、対応するインデックスが自動的に更新されます。

インデックスを再構築する必要が出てくると思います（例えばデータベースを手動で変更した場合などです）。その場合、 conf/application.conf に下記のように記述した上でアプリケーションを再起動してください。:

bc. play.search.reindex=enabled

再構築後に削除するのを忘れないでください！

h2. <a> その他の設定 </a>

conf/application.conf ファイルにおいて、下記の設定を利用できます。

bc. play.search.path=/tmp/myDevApplication
play.search.analyser=org.apache.lucene.analysis.standard.StandardAnalyzer

**play.search.path** はインデックスを格納する場所の設定です。
**play.search.analyser** はインデックスを構築する際に使う Lucene analyzer の設定です。



