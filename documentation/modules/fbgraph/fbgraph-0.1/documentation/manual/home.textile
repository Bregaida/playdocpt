h1. Facebook Graph API support

The FbGraph module enables your application to access all the features of the "Facebook Graph API":http://developers.facebook.com/docs/api/ via Java and the Play Framework. It is inspired by the "Grails Facebook Graph Plugin":http://www.grails.org/plugin/facebook-graph and uses the "JavaScript SDK":http://developers.facebook.com/docs/reference/javascript/ to provide simple login and signup.


h2. Prerequisites

The FbGraph module requires that you "register your application":http://developers.facebook.com/setup/ with Facebook to get an application id for your site.


h2. Installation and configuration

Start by installing the FbGraph module from the modules repository:

bc. play install fbgraph-{version}

Then, edit the @application.conf@ file to enable the FbGraph module:

bc. # Additional modules
# ~~~~~
# A module is another play! application. Add a line for each module you want
# to add to your application. Modules path are either absolutes or relative to
# the application root.
# They get loaded from top to bottom; Syntax: module.{name}={path}
#
# Keep the next line as is to help the play script to manage modules.
# ---- MODULES ----
module.fbgraph=${play.path}/modules/fbgraph-{version}

Finally, configure the module by setting these properties in your @application.conf@:

bc. # FbGraph
# ~~~~~
fbg.appId={YOUR_APP_ID}
fbg.appSecret={YOUR_APP_SECRET}


h2. Usage

The FbGraph module provides a tag for loading the "JavaScript SDK":http://developers.facebook.com/docs/reference/javascript/. It uses the standard @script@ element, calls FB.init() and specifies a @div@ element named fb-root within the document.

First, include the following tag at the bottom of your page: 

bc. #{fbg.script /}

You are free to add your own full code, like this:

bc. <div id="fb-root"></div>
<script src="http://connect.facebook.net/en_US/all.js"></script>
<script>
    FB.init({appId: 'YOUR_APP_ID', status: true, cookie: true, xfbml : true});
</script>

Next, add the fb namespace in your @html@ tag:

bc. <html xmlns="http://www.w3.org/1999/xhtml" xmlns:fb="http://www.facebook.com/2008/fbml">

Then, add the following Facebook tag anywhere you want in your page to render the standard Facebook login button:

bc. <fb:login-button perms="email,publish_stream" size="medium" onlogin="facebookLogin();"></fb:login-button>

Finally, implements a javascript function that will be called if the Facebook login is successful:

bc. <script type="text/javascript">
    function facebookLogin() {
        // get current login status from facebook.com
        FB.getLoginStatus(function(response) {
            if (response.session) {
                // logged in and connected user, someone you know
                window.location = "@{Application.facebookLogin()}";
            } else {
                window.location = "@{Secure.logout()}";
            }
        });
    }
</script>

In this example, the application will redirect the browser to the action /application/facebookLogin. The URL will invoke the controllers.Application.facebookLogin() action method. In this action, you can do useful things like retrieving an object of the domain class that represents a user (or create one if it doesn't exist):

bc. public static void facebookLogin() {
    try {
        JsonObject profile = FbGraph.getObject("me");
        // or use the basic api method directly -> JsonObject profile = FbGraph.api("me").getAsJsonObject();
        String email = profile.get("email").getAsString();
        User user = User.findByEmail(email);
        if (user == null) {
            user = new User();
            user.firstName = profile.get("first_name").getAsString();
            user.lastName = profile.get("last_name").getAsString();
            user.email = email;
            user.gender = profile.get("gender").getAsString();
            user.insert();
        }
        Session.current().put("username", email);
    } catch (FbGraphException fbge) {
        if (fbge.getType().equals("OAuthException")) {
            flash.error("Facebook Authentication Failure", "");
        }
    }
    redirect("/");
}

The module also provides a "RestFB":http://restfb.com/ client that you can use like this:

bc. public static void facebookLogin() {
    com.restfb.FacebookClient fbClient = FbGraph.getFacebookClient();
    com.restfb.types.User profile = fbClient.fetchObject("me", com.restfb.types.User.class);
    String email = profile.getEmail();
    User user = User.findByEmail(email);
    if (user == null) {
        user = new User();
        user.firstName = profile.getFirstName();
        user.lastName = profile.getLastName();
        user.email = email;
        user.gender = profile.getGender();
        user.insert();
    }
    Session.current().put("username", email);
    redirect("/");
}


h2. Some examples

h3. Getting an object

bc. JsonObject user = FbGraph.getObject("btaylor");
JsonObject page = FbGraph.getObject("cocacola");

h3. Getting a connection

bc. JsonArray friends = FbGraph.getConnection("me/friends");
JsonArray likes = FbGraph.getConnection("me/likes");

h3. Getting a picture URL

bc. String picUrl = FbGraph.getPicture("me");
<img src="${picUrl}" />

h3. Searching

bc. JsonArray publicSearch = FbGraph.getConnection("search", Parameter.with("q", "watermelon").and("type", "post").parameters());
JsonArray targetedSearch = FbGraph.getConnection("me/home", Parameter.with("q", "mark").and("type", "user").parameters());

h3. Paging

bc. JsonArray filteredLikes = FbGraph.getConnection("me/likes", Parameter.with("limit", "3").parameters());
JsonArray filteredSearch = FbGraph.getConnection("search", Parameter.with("until", "yesterday").and("q", "orange").parameters());

h3. Publishing

bc. FbGraph.publish("me/feed", Parameter.with("message", "Hello World!").parameters());

Note: Most write operations require "extended permissions":http://developers.facebook.com/docs/authentication/permissions for the active user.