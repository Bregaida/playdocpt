h1. Facebook Graph API Support

The FbGraph module enables your application to access all the features of the "Facebook Graph API":http://developers.facebook.com/docs/api/ via Java and the "Play framework":http://www.playframework.org/. It is inspired by the "Grails Facebook Graph Plugin":http://www.grails.org/plugin/facebook-graph and uses the "JavaScript SDK":http://developers.facebook.com/docs/reference/javascript/ to provide simple login and signup.


h2. Prerequisites

The FbGraph module requires that you "register your application":http://developers.facebook.com/setup/ with Facebook to get an application id for your site.


h2. Installation and Configuration

Start by installing the FbGraph module from the modules repository:

bc. play install fbgraph-{version}

Then, edit the @application.conf@ file to enable the FbGraph module:

bc. # Additional modules
# ~~~~~
# A module is another play! application. Add a line for each module you want
# to add to your application. Modules path are either absolutes or relative to
# the application root.
# They get loaded from top to bottom; Syntax: module.{name}={path}
#
# Keep the next line as is to help the play script to manage modules.
# ---- MODULES ----
module.fbgraph=${play.path}/modules/fbgraph-{version}

Finally, configure the module by setting these properties in your @application.conf@:

bc. # FbGraph
# ~~~~~
fbg.appId={YOUR_APP_ID}
fbg.appSecret={YOUR_APP_SECRET}


h2. Usage


h3. Fbg Script Tag

The FbGraph module provides a tag for loading the "JavaScript SDK":http://developers.facebook.com/docs/reference/javascript/. It uses the standard @script@ element, calls @FB.init()@ and specifies a @div@ element named @fb-root@ within the document.

First, include the following tag in your page:

bc. #{fbg.script /}


h3. Facebook Namespace

Next, add the @fb@ namespace in your @html@ tag:

bc. <html xmlns="http://www.w3.org/1999/xhtml" xmlns:fb="http://www.facebook.com/2008/fbml">


h3. Facebook Login Button

Then, add the following Facebook tag anywhere you want in your page to render the standard Facebook login button:

bc. <fb:login-button perms="email" size="medium" onlogin="facebookLogin();"></fb:login-button>

If you need access to more information, such as the user's birthday or wall, you must request permissions for this information. You can do this by adding the permissions you need to the @perms@ attribute of the @fb:login-button@ (e.g. @perms="email,user_birthday,publish_stream"@).

A full list of permissions is available "here":http://developers.facebook.com/docs/authentication/permissions/.


h3. JavaScript Function and Controller Action Method

Finally, implements a JavaScript function that will be called if the Facebook login is successful:

bc. <script type="text/javascript">
    function facebookLogin() {
        // get current login status from facebook.com
        FB.getLoginStatus(function(response) {
            if (response.session) {
                // logged in and connected user, someone you know
                window.location = "@{Application.facebookLogin()}";
            } else {
                window.location = "@{Secure.logout()}";
            }
        });
    }
</script>

In this example, the application will redirect the browser to the action /application/facebookLogin. The URL will invoke the controllers.Application.facebookLogin() action method. In this action, you can do useful things like retrieving an object of the domain class that represents a user (or create one if it doesn't exist) and put the user's name into the session:

bc. public static void facebookLogin() {
    try {
        JsonObject profile = FbGraph.getObject("me"); // fetch the logged in user
        String email = profile.get("email").getAsString(); // retrieve the email
        // do useful things
        Session.current().put("username", email); // put the email into the session (for the Secure module)
    } catch (FbGraphException fbge) {
        flash.error(fbge.getMessage());
        if (fbge.getType() != null && fbge.getType().equals("OAuthException")) {
            Session.current().remove("username");
        }
    }
    redirect("/");
}


h2. Examples


h3. Reading

bc. // Objects
JsonObject user             = FbGraph.getObject("btaylor");
JsonObject page             = FbGraph.getObject("cocacola");

bc. // Connections
JsonArray friends           = FbGraph.getConnection("me/friends");
JsonArray newsFeed          = FbGraph.getConnection("me/home");

bc. // Selection
JsonObject fields           = FbGraph.getObject("bgolub", Parameter.with("fields", "id,name,picture").parameters());
JsonElement ids             = FbGraph.api("", Parameter.with("ids", "arjun,vernal").parameters());

bc. // Picture
String profilePicUrl        = FbGraph.getPicture("me");

bc. // Paging
JsonArray filteredLikes     = FbGraph.getConnection("me/likes", Parameter.with("limit", "3").parameters());
JsonArray filteredSearch    = FbGraph.getConnection("search", Parameter.with("until", "yesterday").and("q", "orange").parameters());


h3. Searching

bc. JsonArray publicPostSearch  = FbGraph.getConnection("search", Parameter.with("q", "watermelon").and("type", "post").parameters());
JsonArray publicUserSearch  = FbGraph.getConnection("search", Parameter.with("q", "mark").and("type", "user").parameters());


h3. Publishing

bc. JsonElement post = FbGraph.publish("me/feed", Parameter.with("message", "Hello World!").parameters());

Note: Most write operations require "extended permissions":http://developers.facebook.com/docs/authentication/permissions for the active user.


h3. Deleting

bc. Boolan deleted = FbGraph.delete(OBJECT_ID);


h2. Alternatives


h3. Fbg Script Tag

You can replace the @fbg.script@ tag with your own full code, like this:

bc. <div id="fb-root"></div>
<script src="http://connect.facebook.net/en_US/all.js"></script>
<script>
    FB.init({appId: 'YOUR_APP_ID', status: true, cookie: true, xfbml : true});
</script>


h3. RestFB Client

The module also provides a "RestFB":http://restfb.com/ client that you can invoke like this:

bc. public static void facebookLogin() {
    com.restfb.FacebookClient fbClient = FbGraph.getFacebookClient();
    com.restfb.types.User profile = fbClient.fetchObject("me", com.restfb.types.User.class);
    String email = profile.getEmail();
    // do useful things
    Session.current().put("username", email);
    redirect("/");
}

h2. Known Issues

* There's a bug in Play 1.1 with the WSUrlFetch implementation that prevents using the publish feature of FbGraph module in conjunction with the GAE module "[see this thread]":http://groups.google.com/group/play-framework/browse_thread/thread/3cb357688ec343f4/d07cbf2f4ac82e7f. The workaround is to use the RestFB client provided with the FBGraph module (see the "Alternatives" section).
