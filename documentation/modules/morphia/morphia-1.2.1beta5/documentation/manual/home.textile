Updates in 1.2.1beta5
* disableValidation() メソッドをモデルに追加。異なるサブタイプモデルが異なるフィールドを持つときに便利です。
* @NoId アノテーションを追加。https://groups.google.com/forum/#!topic/play-framework/hPWJCvefPoI/discussion で議論されている問題を解決するのに役立ちます。

Updates in 1.2.1beta4
* Upgrade morphia to 1.0-snapshot and mongo lib to 2.6.1

Updates in 1.2.1beta3
* 複数 mongodb データベースの限定的なサポート。

Updates in 1.2.1beta-2
* 設定されたデータベースが存在しない場合、警告と共に"test" データベースが利用されるようにした。
* MorphiaFixtures.deleteX を呼び出した時、 id キャッシュをクリアするようにした。
* 自動タイムスタンプをサポート。

Updates in 1.2.1beta-1
* play-1.2.x と互換可能にした。

Updates in 1.2beta-6
* フィルタ ( where 句 ) を Model.Factory.count と Model.Factory.fetch でサポート
* @Global とアノテーション付けされた ObjectIdBinder を追加。問題 #5 を修正。 
* #16 の問題のため、morphia ライブラリを 0.99-Snapshot に一時的に戻した。

Updates in 1.2beta-5:
* 問題を修正： https://github.com/greenlaw110/play-morphia/issues#issue/12
* MorphiaPlugin.MorphiaModelLoader.fetch|count に where 句を記述できるようにサポート。

Updaets in 1.2beta-4:
* morphia ライブラリを 0.99 にアップデート。
* mongo driver を 0.24 にアップデート。

Updates in 1.2beta-3:
* 7,8,9 の問題を修正。詳しくは  http://github.com/greenlaw110/play-morphia/issues をNavegarしてください。
* 新しい設定： morphia.defaultWriteConcern を追加。

Updates in 1.2beta-2:
* Play reload が MappingException (https://github.com/greenlaw110/play-morphia/issues#issue/6) を発生させる不具合を修正。
* MorphiaEnhancer と MorphiaPlugin 内のデバッグ情報を抑制 

Updates in 1.2beta:
* Morphia ライブラリを 0.99-SNAPSHOT にアップグレード。 mongodb driver を 2.3 にアップグレード。
* Model の query メソッドで 今よりも良い Generic をサポート。メソッドの返り値に対して型キャストをする必要がなくなりました。しかしフィールドもしくは、式の中でのクライテリアを使用するのであれば、型キャストが今でも必要です。
* morphia-0.97 からリリースされた新しい Or クエリーインタフェースをサポート。

注意： ID として Long 型 ("morphia.id.type" で設定可能 ) を使う場合と @Reference アノテーションをエンティティに持つ場合、問題があります。 <a href="http://groups.google.com/group/morphia/browse_thread/thread/bdd51121c2845973">この掲示板</a> を注意深く確認してください。  Yabe サンプルはアップデートされ、同様の理由で ObjectId を ID として利用するようになりました。

公開された問題: 
1. <a href="https://github.com/greenlaw110/play-morphia/issues/issue/5">StackOverflowError with unbind</a>
2. <a href="https://github.com/greenlaw110/play-morphia/issues/issue/6">Play reload cause MappingException</a>

Updates in 1.1d:
* Play のリロードが MappingException (https://github.com/greenlaw110/play-morphia/issues#issue/6) を引き起こすバグを修正
* MorphiaEnhancer と MorphiaPlugin 内のデバッグ情報を抑制 

Updates in 1.1c:
* MorphiaFixture のバグを修正 : delete(Class<Model>) -> delete(Class<? extends Model)

Updates in 1.1b: 
* Yabe 単体テストをパスした。
* isNew() メソッドをモデルに追加。
* Model.save() が JPAModel に準拠する Model オブジェクトを返すようにしました。さらに Model.saveZ() を使用し、 Key<Model> を返すようにしました。

Updates in 1.1a:
* ユーザー定義の @Id フィールドによる問題を修正
* ユーザー定義の @Id フィールドエンティティの作り方を文書に追記

h1. Morphia モジュール

Morphia モジュールは play.db.Model と mongodb 間の橋渡し役です。
<script type="text/javascript" src="http://www.ohloh.net/p/485871/widgets/project_users_logo.js"></script>

本モジュールは <a href="http://code.google.com/p/morphia/">googlecode</a> 上の morphia プロジェクトに依存しています。
<script type="text/javascript" src="http://www.ohloh.net/p/484627/widgets/project_partner_badge.js"></script>

h2. <a>モチベーション</a>

はじめは私は既存の <a href="http://www.playframework.org/modules/mongo">play-mongo</a> プラグインが使いたいと思っていました。しかし、私にとって必要な下記の機能がなかったのです。
例：
* java の名前 ( 具体的には long ) を mongo db の名前 ( short ) に マップする機能のサポート
* フィールドに対しての unique index の作成
* ライフサイクルマネジメント　：@PreLoad, @PostPersist 等

私は <a href="http://code.google.com/p/morphia/">morphia</a> プロジェクトに出会い、求めていたものだと感じた。ちょっとしたコードを書くだけで、既存の Play framework 内のデータモデルにアクセスできる。それがこのプラグインを出した背景である。

h2. <a>機能</a>

Morphia モジュールは play.db.Model から mongo へのアクセスと少しの変更だけで、 JPA/RDBMS から mongodb への移行を提供します。

* アノテーション一覧:
** Entity ( short collection name のサポート ) java.persistence.Entity と同様、 javax.persistence.Table と紐付ける機能
** Id javax.persistence.Idと同様。 @Id とフィールドにマークをしなくても MorphiaEnhancer がそれを生成してくれます。
** Property ( short field name のサポート ) javax.persistence.Columnと同様。
** Indexed ( unique と dropDups オプションのサポート ), index が必要なフィールドにマークすると利用可能になります。
** Transient, 無視されるべきフィールドにマークします。
** Embedded, もう一つのエンティティに組み込まれるエンティティもしくは、エンティティに組み込まれるホストエンティティのフィールドに対してマークします。
*** @Embedded でアノテーション付けされたクラスは play.modules.morphia.Model クラスを継承しないことを注意してください。
** Life cycle annotations: PreLoad, PrePersist, PostLoad, PostPersist...
** その他の多くの使いやすいアノテーションは <a href="http://code.google.com/p/morphia/wiki/EntityAnnotation">こちら</a> で見つけることができます。
** AutoTimestamp( v1.2.1beta-2からサポートされています ), play-morphia の独自アノテーションです、このアノテーションでアノテーション付けされると、本プラグインは自動的にクラスに下記の2つのフィールドを追加します。
*** public long _created; // モデルが作成されると System.currentTimeMills() がこのフィールドに代入されます。フィールドにアクセスすると、 myModel._getCreated() を呼び出します。
*** public long _modified; // モデルが保存されると常に System.currentTimeMills() がこのフィールドに代入されます。フィールドにアクセスすると、 myModel._getModified() を呼び出します。

* play.db.Model サポート
** コードの変更をせずに既存のインタフェースのほとんどを利用可能にします。 Fixtures.load() によって yml データをロードできます。 find("byXAndY", ...) スタイルのクエリーを利用することができます。しかし、 SQL/JQL クエリーはサポートされていません。 "Post.find("postedAt < ? order by postedAt desc", postedAt).first();" は  "(Post) Post.filter("postedAt <", postedAt).order("-postedAt").get();" に変換されます。このような変換の詳細は YABE サンプルを参考にしてください。 Tag.java 内にどうやって SQL の集合が mongodb の mapReduce に変換されるかが示されている例があります。注意：テストデータを省いて Fixtures.delete() メソッドを単純に使うことはできません。 MorphiaFixtures.deleteXX() を代わりに使ってください。
** (1.2beta-5 の新機能 ) Model.Factory.fetch|count での simple where 句をサポート
*** where 句の例: "prop = val", "prop in (val1, val2, ...)", "prop1 = val1 and prop2 = val2 and prop3 in (val1, val2, val3, ..) ..."

* Dynamic Id サポート
** MongoDB は org.bson.types.ObjectId を Id フィールドの型として使うことを推奨しています。 新しい Id の生成のためにデータベースにアクセスする必要がないというのは利用しやすいです。しかし、もし Long をIDとして利用する場合 ( CRUD の ID を数字のみにしたいという要求はあるでしょう。), Long の利用も可能です。 application.conf 内に "morphia.id.type=Long" 行を追加するだけです。こうすれば Morphia は Long 型の ID を生成してオブジェクトをハンドリングすることができます。 Tag.name のようにどんな型でも Id フィールドを設定する事もできます ( ここでは String がベターでしょう ) 。その場合、 Morphia は Id フィールドを管理しません。

* CRUD サポート
** Morphia は CRUD を透過的にサポートします。しかし、 Embedded エンティティタイプには継承された制限があります。 MongoDb は組み込みドキュメント用の ID フィールドを制限しています、そのため YABE サンプル内のコメントのように CRUD を利用して Embedded エンティティを管理することはできません。

* Data Binding と Validation
** お気に入りの "Binder.bind(user, "User", params.all());" もしくは "User.edit(user, "User", params.all());" それと "Validation.valid(user);" を http リクエストパラメータの validation のために呼び出すことができます。

* Indexing
** 手で index を作る必要はありません。フィールドに @Indexed をつければいいだけです。 Morphia は play application の起動の際に index を作成することを保証します。

h2. 制限

* Generic がうまく動作しません。 型キャストが必要になる場合があります。誰かが助けてくれるなら、助かります。。。

bc.. public List<play.db.Model> fetch(int offset, int size, String orderBy, String order, List<String> searchFields, String keywords, String where);

h2. TODO リスト

* ファイルを GridFS に保存できるようにサポートすること

h2. <a>依存関係</a>

* Play: Play-1.1 リリース。 1.1 beta1 ではなく、 current の trunk を使う分には動作確認済み。
* Morphia: morphia-0.97 + <a href="http://code.google.com/p/morphia/issues/detail?id=104">パッチ</a>が必要。まとまった jar ファイルでの利用が安全です。

最新の Play (1.1 beta よりも新しいバージョン) と morphia@googlecode (morphia-0.96-SNAPSHOT.jar よりも新しいバージョン) がどうしても必要なら、 Play と Morphia 双方に影響している開発中のバージョンがあります、両方のプロダクトの最新の trunk にコード変更が必要です。本プラグイン中の morphia-0.96-SNAPSHOT.jar を使うほうが安全です。 http://code.google.com/p/morphia/ で配信されているものを使うべきではありません。

h2. <a>Usage</a>

h3. <a>設定</a>

bc.. ## Morphia モジュールの設定
# Morphia モジュールのロード
module.morphia=${play.path}/modules/morphia
# MongoDB サーバーがある場所
morphia.db.host=ckweb
# MongoDB サーバーのポート番号
morphia.db.port=27017 
# データベースの名前
morphia.db.name=yabe
# MongoDB サーバーへの認証情報
#morphia.db.username=user
#morphia.db.password=pass
# IDフィールドの型の設定
# ObjectId にするか Long 型にするか。デフォルトは ObjectId 
morphia.id.type=Long
# Set default write concern, see http://api.mongodb.org/java/current/com/mongodb/class-use/WriteConcern.html
#morphia.defaultWriteConcern=safe

h3. <a>Morphia を利用したドメインモデルの作成 </a>

bc.. package models;
 
import play.data.validation.Email;
import play.data.validation.Required;
import play.modules.morphia.Model;

import com.google.code.morphia.annotations.Entity;
 
@Entity
public class User extends Model {
 
    @Email
    @Required
    public String email;
    
    @Required
    public String password;
    
    public String fullname;
    
    public boolean isAdmin;
    
    public User(String email, String password, String fullname) {
        this.email = email;
        this.password = password;
        this.fullname = fullname;
    }
    
    public static User connect(String email, String password) {
        return find("byEmailAndPassword", email, password).first();
    }
    
    public String toString() {
        return email;
    }
 
}

p. @Embedded クラスは play.modules.morphia.Model クラスを継承しないことを注意してください。

p. User.java は Play のサンプルとテストにあるものからほとんど変更していません。唯一の違いは Model です、 Model のパッケージは play.modules.morphia.Model にし、 Entity も com.google.code.morphia.annotations.Entity にしています。

h3. <a>JQL クエリーを MongoDB クエリーに移行する</a>

h4. JPA Style

bc..     public Post previous() {
        return Post.find("postedAt < ? order by postedAt desc", postedAt).first();
    } 
    
h4. Morphia style:

bc..     public Post previous() {
        return (Post) Post.filter("postedAt <", postedAt).order("-postedAt").get();
    }

h3. <a>MapReduce による集約</a>

h4. JPA style:

bc..     public static List<Map> getCloud() {
        List<Map> result = Tag.find(
            "select new map(t.name as tag, count(p.id) as pound) from Post p join p.tags as t group by t.name"
        ).fetch();
        return result;
    }

h4. Morphia style:

bc..     private static final String m_ = "function() {this.tags.forEach(function (t) {emit (t, {count:1});});}";
    private static final String r_ = "function(v, vs){var t=0;for(var i=0;i<vs.length;++i){t+=vs[i].count}return{tag: v, count:t}}";
    public static List<Map<String, Integer>> getCloud(Query<? extends Model> query) {
        List<Map<String, Integer>> result = new ArrayList<Map<String, Integer>>();
        Datastore ds = MorphiaPlugin.ds();
        DBCollection dbCol = ds.getCollection(Post.class);
        MapReduceOutput out = dbCol.mapReduce(m_, r_, null, query == null ? null : ((QueryImpl<? extends Model>)query).getQueryObject());
        for (Iterator<DBObject> itr = out.results().iterator(); itr.hasNext();) {
            DBObject dbo = itr.next();
            DBObject k_v = (DBObject)dbo.get("value");
            Map<String, Integer> m = new HashMap<String, Integer>();
            m.put((String)k_v.get("tag"), ((Double)k_v.get("count")).intValue());
            result.add(m);
        }
        return result;
    }
    
p. 本コードはそこまでキレイではないため、将来的に簡単にしていきたいと思っています。

h2. <a>FAQ</a>

h3. play アプリケーションを prod モードで実行している最中に下記のエラーが出ました。原因を教えて下さい。

bc.. play.exceptions.JavaExecutionException: Cannot load fixture initial-data.yml: The JPA context is not initialized. JPA Entity Manager automatically start when one or more classes annotated with the @javax.persistence.Entity annotation are found in the application.
        at play.jobs.Job.call(Job.java:119)
        at Invocation.Job(Play!)
Caused by: java.lang.RuntimeException: Cannot load fixture initial-data.yml: The JPA context is not initialized. JPA Entity Manager automatically start when one
 or more classes annotated with the @javax.persistence.Entity annotation are found in the application.
        at play.test.Fixtures.load(Fixtures.java:214)
        at Bootstrap.doJob(Bootstrap.java:21)
        at play.jobs.Job.doJobWithResult(Job.java:37)
        at play.jobs.Job.call(Job.java:110)
        
p. 本現象は Play v1.1-beta1 で発生します。最新の 1.1 version に変更してください。

h3. "OR" 条件のクエリーの作り方を教えて下さい。

bc..     Query q = myPost.createQuery(); // create a Query
    q.or(q.criteria("title").contains("mongodb"), q.criteria("content").contains("mongodb"), ...);
    List<play.db.Model> l = new ArrayList<play.db.Model>();
    l.add(q.order("-postedAt").limit(10).asList()); // sort the result by postedAt desc order and fetch at most 10 items
    return l;

h3. 集約の方法を教えて下さい。

"MapReduce による集約" を参考にしてください。

h3. 本プラグインで多くの編集とランタイムエラーが出るんですが。

"依存関係" の項目を再チェックしてください。

h3. Morphia を選択した理由は何ですか? GuiceyMongo のほうが速いって聞いたけど。

Play-Morphia のゴールは Play アプリケーション開発者の既存のアプリケーションを RDBMS や JPA から MongoDB に最小限の努力で移行できるようにする方法を提供することです。 Morphia は JPA スタイルの MongoDB へのアクセスを提供する最良の方法です。あなたが新しく Play アプリケーションを開発し、異なる方法を試したいのであれば、 GuiceyMongo が良い選択かもしれません。

h3. ユーザー定義の @Id フィールドを持つ Entity はどうやって作成するのですか?

* @com.google.code.morphia.annotations.Id アノテーションを ID フィールドとして利用したいフィールドに追加してください。例： @Id name;
* play.modules.morphia.Model; 内に宣言されている下記のメソッドを Override してください。

bc..     @Override public Object getId() {return name;}
    @Override protected void setId_(Object id) {name = id.toString();}
    protected static Object processId_(Object id) {return id.toString();}

p. model.save() を呼び出す前に追加された @Id フィールドを確認してください、フレームワークに Id 生成させないようにしてください。 Id をどうするべきかをフレームワーク側は知りません。

@Id フィールドの型を java.lang.String にしておくほうが良いでしょう。

h3. リレーションシップを利用してエンティティを検索しようとしたら "Can not use dot-notation past  ..." という exception が発生したんですが、何が原因でしょうか?

p. 基本的に参照されたエンティティプロパティを利用している際にエンティティを検索しようとしたときにこのエラーが発生します。 E.g. Post p = Post.filter("author.email", "bob@gmail.com").first(). 解決策は以下のとおり。

bc.. User bob = User.filter("email", "bob@gmail.com").first();
Post p = Post.filter("author", bob).first();

p. リレーションシップが reference ではなく embedded になっている場合、クエリーにドット表記を使用することはできますか?
 
h3. エンティティオブジェクトがメモリ中で作られた新しいオブジェクトなのか、データベースからロードされたデータなのかどうやって知ればいいのでしょう?

p. obj.isNew() メソッドを使ってください。

h3. Unit テストの setup メソッド内で Fixtures.deleteAll() メソッドを呼びだそうとしましたが、データが残ったままになります。どうすれば良いのでしょう?

p. play.test.Fixtures で定義された deleteAll() メソッドは JPA ベースのデータベースでフックされます。 MorphiaFixtures.deleteAll() メソッドを代わりに使ってください。 Morphia の全てのメソッドは Fixtures の代わりに MorphiaFixtures の使用を推奨しています。

h3. morphia.defaultWriteConcern は何故設定しても動作しないのでしょう?

p. morphia のカレントバージョン　(　今は 0.99　) の <a href='http://code.google.com/p/morphia/issues/detail?id=209'> バグ </a> です。

h3. 複製 ID フィールドエラーが出ました。

p. サブタイプモデルを定義した場合、 Morphia は拡張し、サブタイプと親タイプの両方のフィールドに @Id を追加するでしょう。その結果、2つの @Id フィールドをサブタイプが持つことになります。この問題を解決するためには、サブタイプもしくは親タイプのどちらかに @NoId アノテーションを付ける必要があります。 (morphia-1.2.1beta5 で利用できるようになりました )
