h1. akka support

akka (http://akkasource.org) はシンプルで正確でフォールトトレラントで、並列でスケーラブルなアプリケーションを構築できる JVM のためのプラットフォームです。このモジュールは Play と akka を同時に起動、実行することが出来ます。


p(note). **Note akka の REST, Comet, Spring, Guice, Camel, Persistence, AQMP ライブラリについて** akka モジュールからこれらを取り除いてあります。 REST と Comet ライブラリは servlet とともに動くように作られており、おそらく期待するようには動きません。しかし、 PLay! はすでに REST と Comet については素晴らしいサポートをしているため、 akka によって REST と Comet のサポートを受ける必要はないでしょう。同様に、 Spring や Guice のサポートも含めていません。なぜなら Spring や Guice の Play! モジュールの邪魔をしたくないからです（だれか OSGi って言った？）。そして最後に Camel, Persistence, AQMP のサポートを外しました。依存関係を減らしたかったためです。もしこれらの akka サポートを利用したい場合には、自分で jar をダウンロードしてクラスパスに追加することが出来ます。

p(note). akka は Scala モジュールが必要であるにも関わらず、 Java の API も存在します。私は Scala でプログラミングするのを楽しんでおり、 Java API はあまりきちんとは確認していません。全てのサンプルは Scala で書いています。もしあなたが Java API によるサンプルを提供してくれるのであれば、私は喜んでそれを含めますよ！

**スクリーンキャスト**

Screencast One for the akka module for The Play! framework: http://vimeo.com/10764693 

Screencast Two for the akka Play! Module. Rudimentary Actors: http://vimeo.com/10792173

**とりあえずこれだけは見てください**
Screencast Three for the akka Play! module. Remote Actors: http://vimeo.com/10793443

h2. はじめに

p(note). Scala モジュールも akka モジュールも、開発中の Play1.1 が必要であることについて注意すべきです。 Play1.1 が完成するまでは、このモジュールの利用は自己責任で使ってください！（とにかく楽しいけどね！）

Scala モジュールが必要です。まだインストールしていなければ、 **install** コマンドでインストールして下さい。

bc. play install scala-head

インストールが終わったら、 akka モジュールをインストールしましょう。

bc. play install akka-head

新しい Play! プロジェクトを "myapp" という名前で作りましょう。

bc. play new myApp --with scala-head,akka-head

既に存在しているプロジェクトに akka を追加する場合は、下記の行を **conf/application.conf** ファイルに追記します。

bc. module.scala=${play.path}/modules/scala-head
module.akka=${play.path}/modules/akka

**起動** するには下記のようにします。

bc. play run 

（上記コマンドは Play1.1 のバグが直ったら、 "play run" に変わります）

h2. 設定

すべての設定は conf フォルダーの下に置いた akka.conf ファイルで行います。設定の仕方についての詳細な情報はここにあります。: http://doc.akkasource.org/configuration

h2. サンプル

いくつかのサンプルをモジュールに含めてあります。 sample-app フォルダーの中にあります。 sample-app を実行するには、 scala-head がインストールされていることを確認した上で、${play.path}/modules/akka/sample-app に移動して、下記のように実行してください。:

bc. play run

サンプルはすべてヒットカウンターです。 akka について異なる視点から説明しています。下記のスクリーンキャストの中ですべて見ることができます。:

Screencast One for the akka module for The Play! framework: http://vimeo.com/10764693 

Screencast Two for the akka Play! Module. Rudimentary Actors: http://vimeo.com/10792173

**とにかくこれだけは見てください**
Screencast Three for the akka Play! module. Remote Actors: http://vimeo.com/10793443

最初のサンプルは **app/controllers/HitCounter.scala** にあります。 http://localhost:9000/hitCounter でアクセスできます。これは Software Transactional Memory (STM) をどのように使えばいいのかについての説明です。ユーザーがこの URL を叩くたびに、ヒットカウンターが増えていきます。 TransactionalRef における操作はアトミックで独立し、矛盾のないトランザクションとして実行されます。これが基本的に意味するところは、二つのリクエストが同時に更新しようとした場合に、片方のリクエストが成功し、片方が失敗するということです。失敗したほうのリクエストが失敗した時には、自動的に更新を再実行しようとします。もし 20,000 人の人がサイトを訪れた場合、ヒットカウンターは正確に 20,000 と表示されます。この結果をスクリーンキャストで確認することが出来ます:  http://vimeo.com/10764693

次のサンプルもヒットカウンターです。**app/controllers/ActorHitCounter.scala** にあります。 http://localhost:9000/actorHitCounter でアクセスできます。これによってとても初歩的な actor の例を見ることが出来ます。もしあなたが Actor パターンに馴染みがないのであれば http://vimeo.com/10792173 のスクリーンキャストが Actor パターンに関する概要と、 akka actor とともに動く幾つかの異なるメソッドについての参考になります。このサンプルは Scala ディストリビューションに含まれている actor ライブラリでは出来ない事については何も見ることが出来ません。本当にクールなものを見たければ、次のサンプルを見てください。

三番目のサンプルはクラスター環境で動くヒットカウンターです。 **app/controllers/ClusteredHitCounter.scala** に **app/AkkaBootStrapJob.scala** とともにあります。前のサンプルはシングルサーバー環境において正しい数値が表示される例でしたが、複数のサーバーがクラスター化された場合、サーバーに対して何人のユーザーがリクエストをしたかについてのヒット数になってしまい、クラスター全体に対するヒット数ではなくなってしまいます。クラスター全体に対するヒット数を正確に集計するには、各サーバーは、ヒット数のトラッキングができるように actor を登録しておき、尋ねられたときにその数を報告できるように管理する必要があります。このサンプルはもう少し込み入っています。これが実際に動いているのを見るには、複数のサーバーが起動している必要があるためです。全てを確認するには、このスクリーンキャストを見てください。: http://vimeo.com/10793443
