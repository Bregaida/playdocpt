h1. Play 1.0.1 -- Notas de Lançamento

**Play 1.0.1** é uma versão de manutenção do branch Play 1.0. Ela conserta vários pequenos erros, provê um melhor binding para os objetos JPA de persistência, detecta automaticamente código HTML e JavaScript nos templates para evitar problemas de segurança com XSS.

p(note). **Play 1.0.1** é uma versão de manutenção e é totalmente compatível com a versão 1.0. Se você encontrar algum problema, por favor, nos pergunte no Google Group.

Você pode ler sobre os erros consertados em "1.0.1 road map page":http://www.playframework.org/roadmap/1.0.1. As mudanças mais importantes estão destacadas nesta página:

h2. <a>Escaping automático para código HTML nos templates</a>

Agora todas as dynamic expressions são escaped pelo template engine para evitar erros de segurança XSS na sua aplicação. Então a variável @title@ contendo <code>==&lt;h1>Title&lt;/h1>==</code> agora é escaped para:

bc. ${title} --> &lt;h1&gt;Title&lt;/h1&gt;

Se você realente quiser mostrar isso em um modo não escaped, você precisa chamar o método @raw()@ explícitamente:

bc. ${title.raw()} --> <h1>Title</h1>

Além disso, se você quiser mostrar uma grande parte de HTML puro, você pode user a tag @#{verbatim /}@:

bc. #{verbatim}
    ${title} --> <h1>Title</h1>
#{/verbatim}

Claro, como esta característica pode quebrar várias aplicações já existentes, ela não está ativada por padrão. Você pode ativá-la adicionando a linha seguinte no arquivo @application.conf@ da sua aplicação:

bc. future.escapeInTemplates=true

Esta linha será adicionada automaticamente às novas aplicações criadas com a versão 1.0.1.

h2. <a>Suporte a @javax.inject.Inject</a>

Agora você pode usar a anotação <code>@Inject</code> caso você utilize um Dependency Injection container como, por exemplo, um provido pelo "Spring module":spring. A anotação <code>@Inject</code> injeta automaticamente os beans definidos nos seus controllers, jobs e mailer. Isso funciona em fields estáticos.

Por exemplo, para injetar um serviço @PriceWatcher@ definido no Spring em um de seus controllers, somente faça:

bc. public class Application extends Controller {

    @Inject
    static PriceWatcher prices;

    public static void index() {
        prices.getAll(); // preços são definidos aqui
    }

}

A atualização automática deve funcionar como esperado.

h2. <a>Melhor apontamento de objetos JPA</a>

Antes não havia maneira de apontar (bind) um objecto JPA automaticamente utilizando o apontamento HTTP para Java. Por exemplo:

bc. public static void save(User user) {
    user.save(); // falha no 1.0
}

Como @User@ é uma JPA entity class, este código falhou porque user era um objeto transitório criado pelo Binder e ainda não pelo Hibernate.

O velho modo era usar o método @edit()@, como:

bc. public static void save(Long id) {
    User user = User.findById(id);
    user.edit(params);
    user.save(); // ok
}

Agora você mesmo pode prover o campo @user.id@ nos paramêtros HTTP. Quando o Play encontra o campo @id@, ele carrega a instância correta a partir da base de dados antes de editá-la. Os outros parâmetros providos pela requisição HTTP são então aplicados. Então você pode salvá-los diretamente.

bc. public static void save(User user) {
    user.save(); // ok no 1.0.1
}

É claro que, como este novo recurso pode quebrar aplicações já existentes, ele não está ativo por padrão. Você pode ativá-lo adicionando a linha abaixo no arquivo @application.conf@ da sua aplicação:

bc. future.bindJPAObjects=true

Esta linha é adicionada automaticamente nas novas aplicações criadas com a versão 1.0.1.

h2. <a>Framework ID pode ser setado através da linha de comando</a>

O framework ID permite que você rode configurações diferentes para uma mesma aplicação Play (por exemplo: dev, test, staging, produção, etc...).

Usando a linha de comando, agora você pode especificar qual "framework ID":ids a aplicação irá utilizar. Por exemplo, para rodar uma aplicação no modo de produção:

bc. play run --%production

Com essas linhas definidas no arquivo @application.conf@:

bc. application.mode=dev
%production.application.mode=prod

Isso é compatível com todas os comandos existentes que utilizam a informação do framework ID. O ID padrão ainda é definido utilizando o comando @play id@.

A propósito, @play test@ é equivalente a:

bc. play run --%test

h2. <a>Validações customizadas</a>

Não conseguiu achar o validator que você precisa no pacote @play.data.validation@? Escreva uma sua. Você pode usar a anotação genérica <code>@CheckWith</code> para apontar (bind) sua própria implemantação @Check@.

Por exemplo:

bc. public class User {

    @Required
    @CheckWith(MyPasswordCheck.class)
    public String password;

    static class MyPasswordCheck extends Check {

        public abstract boolean isSatisfied(Object user, Object password) {
            return notMatchPreviousPasswords(password);
        }

    }
}

h2. <a>Atualização do Test Runner</a>

Nós atualizamos o Selenium para a versão 1.0.1 final e melhoramos a UI (User Interface). Os testes do Selenium agora rodam em fullscreen. E algumas novas funcionalidades como "Run all tests" foram adicionadas.

!images/selenium-fullscreen!

A documantação local agora também está disponível, quando você roda suas aplicação no test mode.

h2. <a>HTML5 como doctype padrão e JQuery nas novas aplicações</a>

Novas aplicações vem com um esqueleto HTML padrão. Antes era um **XHTML 1.0 Transitional** HTML formatado. Agora isso vem como um **HTML5** doctype por padrão:

bc. <!DOCTYPE html>

<html>
    <head>
        <title>#{get 'title' /}</title>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <link rel="stylesheet" type="text/css" media="screen" href="@{'/public/stylesheets/main.css'}">
        #{get 'moreStyles' /}
        <link rel="shortcut icon" type="image/png" href="@{'/public/images/favicon.png'}">
        <script src="@{'/public/javascripts/jquery-1.6.min.js'}" type="text/javascript" charset="utf-8"></script>
        #{get 'moreScripts' /}
    </head>
    <body>
        #{doLayout /}
    </body>
</html>

Este é somente o padrão e é claro que você pode alterar isso para qualquer doctype se desejar. Entretanto "HTML5":http://html5.org é certamente o futuro e a maneira mais fácil.

O template padrão vem com a biblioteca **JQuery**. Isso porque aplicações web modernas precisam de um bom framework JavaScript e nós amamos "JQuery":http://www.jquery.com. E novamente, este é somente o padrão e é claro que você pode sobrescrever isso com qualquer biblioteca JavaScript que você quiser.

Oh, e esta versão vem com dois espaços reservados (placeholders) padrões para injetar ainda mais scripts e/ou styles. Por exemplo, adicione na sua view:

bc. #{set 'moreScripts'}
<script src="@{'/public/javascripts/gears_init.js'}" type="text/javascript">
</script>
#{/set}

E a biblioteca JavaScript gear será acessível na sua view.

h2. <a>tag #{list} melhorada</a>

O parâmetro @items@ agora é opicional e pode ser substituído pelo argumento @arg@ padrão.

Então você pode reescrever:

bc. #{list items:users, as:'user'}
    <li>${user}</li>
#{/list}

como:

bc. #{list users, as:'user'}
    <li>${user}</li>
#{/list}

O parâmetro @as@ agora também é opicional. Ele usa @_@ como nome padrão da variável:

bc. #{list users}
    <li>${_}</li>
#{/list}

h2. <a>Nova tag #{jsAction /}</a>

A tag @#{jsAction /}@ permite importar uma rota definida no servidor como uma função JavaScript. Isso é bem útil se você precisa chamar uma URL com uma chamada AJAX usando variáveis livres.

Vamos ver um exemplo:

bc. GET     /users/{id}        Users.show

Agora você pode importar essa rota do lado cliente:

bc. <script type="text/javascript">
    var showUserAction = #{jsAction @Users.show(':id')}

    var displayUserDetail = function(userId) {
        $('#userDetail').load( showUserAction({id: userId}) )
    }
</script>

Como você ve, utilize a syntax @:name@ para declarar variáveis livres. Você pode misturar variáveis livres e fixas juntas. A tag @#{jsAction /}@ gera a função JavaScript. Essa função recebe um objeto JavaScript como parâmetro que deve definir todas as variáveis livres.

h2. <a>Nova aplicação de exemplo: 'booking'</a>

A aplicação @booking@ é uma porção da bem conhecida "booking application from the JBoss Seam framework":http://docs.jboss.com/seam/latest/reference/en-US/html/tutorial.html#booking.

Ela demonstra como você pode gerenciar estados complexos do lado cliente de uma maneira RESTful com um framework web stateless.

!images/booking!

h2. <a>O plug-in do Eclipse está a caminho</a>

Nós estamos trabalhando duro para prover um plugin-in dedicado para o Eclipse. Ele está em status alpha, mas já está usável. Você pode achar ele no diretório @support/eclipse@ da sua instalação do Play framework.

!images/eclipse-plugin!

h2. <a>Suporte para IntelliJ IDEA</a>

O Play framework agora suporta "IntelliJ IDEA":http://www.jetbrains.com/idea/ fora da caixa!

Para converter sua aplicação Play para um projeto IntelliJ IDEA, use o comando @idealize@:

bc. # play idealize myApp

!images/intellij!

Você pode usar o Run e Debug a partir do menu context da IDE.

p(note). Próxima versão: %(next)"Play 1.0.2 release notes":releasenotes-1.0.2%
