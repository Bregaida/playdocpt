h1. Cinco coisas legais que você pode fazer com Play

Cinco exemplos para mostrar a filosofia por trás do Play framework.

h2. <a>Vincular (bind) um parâmetro HTTP a um parâmetro de um método Java</a>

Obter parâmetros HTTP de um código Java é realmente simples com Play. Só declare os parâmetros do método com o mesmo nome que os parâmetros HTTP.

Por exemplo, com a requisição (request):

bc. /articles/archive?date=08/01/08&page=2

Você pode obter os parâmetros @date@ e @page@ declarando-os como parâmetros de um método Java:

bc. public static void archive(Date date, Integer page) {
    List<Article> articles = Articles.fromArchive(date, page);
    render(articles);
}

O Play usará o tipo estático dos parâmetros do método para traduzir o valor HTTP em um objeto Java.

O vinculador inteligente também funciona **com qualquer classe.**

bc. public class Person {
    public String name;
    public Integer age;
}

Uma action de um controller simples para adicionar uma pessoa talvez se pareça com isso:

bc. public static void add(Person p) {
    p.save();
}

O form HTML define os campos com nomes compostos:

bc. <form action="/Directory/add" method="POST">
    Name: <input type="text" name="p.name" />
    Age: <input type="text" name="p.age" />
</form>


h2. <a>Redirecionar para uma action chamando o método Java correspondente</a>

Não há comando equivalente no Play para o comando @forward@ do Java Servlet. Mas redirecionar para outra action é bem simples. Somente chame o método Java correspondente e o Play gerará a resposta HTTP 'redirect' correspondente.

bc. public static void show(Long id) {
    Article article = Article.findById(id);
    render(article);
}

public static void edit(Long id, String title) {
    Article article = Article.findById(id);
    article.title = title;
    article.save();
    show(id);
}


Note no final da action edit, nós redirecionamos para a action show.

Em qualquer template você pode usar a sintaxe equivalente para gerar o link:

bc. <a href="@{Article.show(article.id)}">${article.title}</a>

Isso vai gerar o seguinte HTML:

bc. <a href="/articles/15">My new article</a>


h2. <a>Não se repita quando estiver parseando objetos Java para os templates</a>

Na maioria dos frameworks Java, para passar objetos Java para o sistema de template você precisa escrever alguma coisa como:

bc. Article article = Article.findById(id);
User user = User.getConnected();
Map<String, Object> model = new HashMap<String,Object>();
model.put("article", article);
model.put("user", user);
render(model);

Com Play, você escreve somente:

bc. Article article = Article.findById(id);
User user = User.getConnected();
render(article, user);

E recupera objetos a partir do nome local no template. Isso salva um monte de linhas de código inúteis...

h2. <a>JPA sobre esteróides</a>

JPA é com certeza o melhor object-relational mapping (ORM) API disponível para Java. Se você sabe disso você vai se surpreender quão simples isso fica com Play. Sem nada configurado, Play vai automaticamente iniciar o JPA Entity Manager utilizando Hibernate e magicamente sincronizar isso quando o código é recarregado.

Além disso, se você usar a superclasse @play.db.jpa.Model@, ela vai ajudá-lo a tornar seu código mais bonito. Olhe:

bc. public void messages(int page) {
    User connectedUser = User.find("byEmail", connected()).first();
    List<Message> messages = Message.find(
        "user = ? and read = false order by date desc",
        connectedUser
    ).from(page * 10).fetch(10);
    render(connectedUser, messages);
}

h2. <a>Arquivo simples para gerenciamento de upload</a>

Gerenciamento de upload de arquivo é muito simples com Play.

O form HTML:

bc. #{form @uploadPhoto(), enctype:'multipart/form-data'}
    <input type="text" name="title" />
    <input type="file" id="photo" name="photo" />
    <input type="submit" value="Send it..." />
#{/}

E o código Java:

bc. public static void uploadPhoto(String title, File photo) {
   ...
}

Como isso poderia ser mais fácil?
