h1. Play 1.0.2 -- Notas de Lançamento

**Play 1.0.2** é uma versão de manutenção do branch Play 1.0. Dentre os novos recursos, os principais são o suporte ao repositório de módulos e a proteção embutida contra ataques CSRF. Esta versão também corrige um monte de pequenos erros.

p(note). **Play 1.0.2** é uma versão de manutenção e é totalmente compatível com a série 1.0. Se você encontrar algum problema, por favor pergunte-nos no "Google Group":http://groups.google.com/group/play-framework.

Você pode ler sobre os erros corrigidos na "1.0.2 página de road map":http://www.playframework.org/roadmap/1.0.2. As mudanças mais importantes estão realçadas nesta página.

h2. <a>Repositório de Módulos</a>

O objetivo do repositório de módulos é centralizar todos os módulos de contribuições para o Play framework, e permitir uma fácil instalação dos mesmos. Os novos comandos relacionados aos módulos são:

* @play list-modules@, para listar o conteúdo do repositório
* @play install@, para instalar localmente uma versão de um módulo
* @play new-module@, para criar o esqueleto de um novo módulo
* @play build-module@, para empacotar um módulo e publicá-lo no repositório.

Além disso, você verá que quase todos os módulos foram deletados. Somente um punhado de módulos 'core' estão diretamente disponíveis: testunner, docviewer, crud and secure.

Os outros módulos agore são opicionais. Então se você, por exemplo, quiser instalar o suporte a GWT, simplesmente digite @play install gwt@, e você obterá a última versão do módulo.

Por que nós movemos os módulos? Porque nós precisamos focar no core do framework para ter um projeto simples para gerenciar. Além disso, como muitas pessoas querem contribuir com módulos, é mais fácil fazendo desta maneira: cada módulo é um projeto autônomo com um mantenedor dedicado. Então, por favor, se você deseja reportar um erro em um módulo específico, use somente a homepage e o bug tracker deste módulo em questão.

Como benefício imediato, o ciclo de vida dos módulos não é mais amarrado ao ciclo de vida do framework. Um módulo pode ser lançado mais frequentemente que o framework em si. E finalmente, como o framework não contém mais módulos opcionais, o tamanho da distribuição do Play foi reduzido pela metade.

Leia mais sobre o repositório de módulos nesta "página dedicada":modules.

h2. <a>Proteção contra ataques CSRF embutida</a>

Ataques CSRF podem ser relamente problemáticos em uma aplicação web.

bq. Este método de ataque funciona incluindo um código malicioso ou um link em uma página que acessa uma aplicação web na qual o usuário acredita ter se autenticado. Se a sessão desta aplicação web não tiver expirado, um atacante pode executar comandos não autorizados.

Para prevenir este ataque, a primeira coisa à se fazer é utilizar os métodos GET e POST apropriadamente. Isso significa que somente métodos POST deverão ser utilizados para rodar uma interação que pode mudar o estado da aplicação.

Para as requisições POST, o único modo de prover segurança para ações críticas corretamente é emitir um token de autenticidade. O Play 1.0.2 agora tem um helper embutido para manipular isto:

* um novo método @checkAuthenticity()@ está disponível nos controllers, ele checa um token de autenticação válido nos parâmetros da requisição e envia uma resposta forbidden se alguma coisa está ruim
* @session.getAuthenticityToken()@ gera um token de autenticidade que só é válido para a sessão atual
* @#{authenticityToken /}@ cria um hidden input field que você pode adicionar em qualquer form.

Então, por exemplo:

bc. public static destroyMyAccount() {
    checkAuthenticity();
    …
}

Somente irá funcionar quando chamado de um form que tenha incluso um token de autenticidade apropriado:

bc. #{form @ destroyMyAccount()}
    #{authenticityToken /}
    <input type="submit" value="destroy my account">
#{/form}

É claro que você pode adicionar isto antes de um filter se você quiser proteger todas as actions de uma hierarquia de controllers. Leia mais em "Guia de Segurança":security.

h2. <a>Método HEAD suportado por padrão</a>

Agora o Play responde automaticamente para requisições HEAD se houver uma rota existente para o método GET. Isso porque a requisição é feita através do HTTP RFC que responde para qualquer recurso assim como a requisição HEAD.

"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html":http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html

bq. O método HEAD é identico ao GET, exceto que aquele servidor NÃO DEVE retornar um message-body na resposta. A meta-informação contida nos cabeçalhos HTTP na reposta para uma requisição HEAD DEVE ser idêntica par aa informação enviada na resposta para uma requisição GET. Este método pode ser utilizado para obter meta-informação sobre a entidade implícita pela requisição sem transferir o body da entidade em si. Este método é muitas vezes utilizado para testar links para validações, acessibilidade e modificações recentes.

Enão qualquer requisição HEAD invocará sua action, mas o conteúdo da resposta não será enviado para o cliente. Claro que você pode especializar isto adicionando uma custom route para responder requisições HEAD com seus arquivos de routes. Por exmeplo:

bc. GET     /orders/{id}         Orders.show
HEAD    /orders/{id}         Orders.showHead

h2. <a>Nova aplicação de exemplo, 'zencontact'</a>

Uma novo exemplo, que é um port da "Wicket-based contact management application":http://blog.zenika.com/index.php?post/2009/03/10/Concours-Développer-une-application-web-en-Wicket3. Também existe a versão em Scala desta aplicação disponível no pacote do módulo Scala, para os interessados.

!images/zencontact!

h2. <a>Melhor suporte para deploy em servidores de aplicação</a>

Nós testamos o deploy de um WAR gerado pelo Play em diversos servidores de aplicação. Você pode verificar a versão atual da "matriz de compatibilidade":deployment.

|| JBoss 4.2.x || JBoss 5.x || JBoss 6M2 || Glasshfish v3 || IBM Websphere 6.1 ||IBM Websphere 7 || Geronimo 2.x || Tomcat 6.x || Jetty 7.x || Resin 4.0.5 ||
| ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |  ✓ | ✓  |


h2. <a>Novas features pra action reversas nos templates</a>

A sintaxe <code>@@</code>, que permite que você inverta uma ação para uma URL **absoluta**, agora está disponível nos parâmetros de tag, por exemplo:

bc. #{form @@save()}
…
#{/}

Isso é muito útil se você utilizar o template engine para gerar material como e-mail, em que você precisa expressar uma URL de forma absoluta.

Objetos complexos de binding agora também são suportados. Então por exemplo, com esta action:

bc. public static void search(SearchParams params) {
    …
}

SearchParams, sendo:

bc. public class SearchParams {
    public String keywords;
    public String mode;
}

Você pode utilizar em um template, alguma coisa como:

bc. @{search(params)}

Isso vai gerar uma URL contendo vários valores no queryString, como:

bc. /search?params.keywords=xxxx&params.mode=AND

h2. <a>Um comando novo para gerar a Javadoc da aplicação</a>

Agora você pode gerar a **Javadoc** do seu projeto facilmente, usando:

bc. play javadoc

Isso gerará a documentação API Javadoc para o seu projeto e seus módulos.

h2. <a>Um plugin ainda melhor para o Eclipse nesta versão</a>

O plugin do Eclipse agora tem várias features novas:

* Editor de arquivos route avançado, com assistente de conteúdo, detecção de ações inexistentes, e links
* Editor de arquivos de template avançado, com algum assistente de conteúdo, e links
* Wizard para criar novos Controllers, Models e Templates
* Test runner integrado (utilizando um web browser embutido)

!images/route-completion!

!images/eclipse-tests!

Para instalar este plugin, copie o arquivo JAR de @$PLAY_HOME/support/eclipse@ para @$ECLIPSE_HOME/droppins@.

p(note). Próxima versão: %(next)"Play 1.0.3 release notes":releasenotes-1.0.3%

