h1. Configurando sua IDE

Trabalhar com Play é fácil.
Você não precisa sem usar uma IDE sofisticatada e o Play compila e faz o refresh das modificações que você fizer no código fonte automaticamente.
Portanto você pode tranquilamente trabalhar com um simples editor de textos.

Entretanto, usando uma IDE Java moderna proporciona interessantes opções como auto-completion, compilação on-the-fly,assistente de refatoração e debug.

O Play suporta as platformas: "NetBeans":http://www.netbeans.org, "IntelliJ IDEA":http://www.jetbrains.com/idea/index.html e "Eclipse":http://www.eclipse.org .


h2(#eclipse). <a>Eclipse</a>

h3. Configuração geral

O Play proporciona um comando para simplificar a configuração do Eclipse.
Para transformar uma aplicação do Play em um projeto do Eclipse funcionando, use o comando @eclipsify@:

bc. # play eclipsify myApp

Você precisa importar a aplicação para dentro do seu Workspace com a opção do menu **File/Import/General/Existing project…**.

!images/eclipse!

Se você fizer alguma mudança importante na aplicação, como mudar o classpath, use @eclipsify@ novamente para regenerar os arquivos de configuração.

p(note). **Não commite os arquivos de configuração do Eclipse quando trabalhar em equipe!**

Os arquivos de configuração contém referências absolutas da instalação de seu framework.
Eles são específicos de sua instalação.
Quando trabalhar em equipe, cada desenvolvedor de manter os seus arquivos de configuração do Eclipse só para ele.

h3. Launchers

O comando @eclipsify@ gera alguns launchers para a sua aplicação.
Por exemplo, rodando @eclipsify@ em uma aplicação chamada **Nice app** vai criar is seguintes launchers na pasta do @eclipse/@ :

* @Nice app.launch@ - o launcher principal, equivalente ao comando @play run@ , que você pode usar para rodar sua aplicação clicando com o botão direito e selecionando **Run As > Nice app**
* @Test Nice app.launch@ - the test launcher, equivalente ao comando  @play test@ command, que você pode usar para rodar sua aplicação clicando com o botão direito e selecionando **Run As > Test Nice app**
* @Connect JPDA Nice app.launch@ - o conector de debug de sessão JPDA, que pode conectar o Eclipse debugger em uma instância do Play já rodando, clicando com o botão direito e selecionado **Debug As > Connect JPDA Nice app**. Parar a sessão de debug não para o servidor.

h3. plug-in do Play para o Eclipse

Adicionalmente, o Play vem com um plug-in do Eclipse que possui alguns editores para template de HTML, dos arquivos @application.conf@ e @routes@ .

Para instalar, copie o arquivo JAR de @$PLAY_HOME/support/eclipse@ para @$ECLIPSE_HOME/dropins@.


h2(#netbeans). <a>NetBeans</a>

Play provides a command to simplify NetBeans configuration. To transform an existing application to a valid NetBeans project, use the @netbeansify@ command:

bc. # play netbeansify myApp

Then you can just open the application as a NetBeans project.

!images/netbeans!

Use the standard *Run* button to start the application. When the application is started you can attach a debugging session at any time using the *Debug* button. Stopping the debugging session doesn’t stop the server.

If you make any important change to your application such as changing the classpath, use @netbeansify@ again to regenerate the configuration files.

p(note). **Do not commit the @nbproject/@ directory when you work in a team!**

The generated configuration files contains absolute references to your framework installation. These are specific to your own installation. When you work in a team on the same application, each developer must keep his NetBeans configuration files private.

h2(#intellij). <a>IntelliJ IDEA</a>

Play provides a command to simplify IntelliJ IDEA configuration. To transform an existing application to a valid IntelliJ IDEA module, use the @idealize@ command:

bc. # play idealize myApp

To create a single module project, do the following in IntelliJ IDEA.

# On the command line, use the @play new@ command to create the Play project.
# On the command line, use the @play idealize@ command to create an IntelliJ IDEA module.
# In IntelliJ IDEA, on the *File* menu, select *Open Project…* and select the generated @.ipr@ file.

!images/intellij!

To add a run configuration:

# In IntelliJ IDEA, on the *Run* menu, select *Edit Configurations*.
# Right-click on *Application* under *Defaults* and select *Add New Configuration*.
# Under *Main class*, enter @play.server.Server@.
# Under *VM parameters*, enter @-Dapplication.path="."@.
# Under *Working directory*, enter the application path.

To run Play in test mode in IntelliJ:

# Edit the run configuration and in *VM parameters*, append *-Dplay.id=test*.
# Right-click on your module and select *Open Module Settings*.
# Select the *Dependencies* tab.
# Click *Add…* and select *Single-Entry Module Library*.
# Select @$PLAY_HOME/modules/testrunner/lib/play-testrunner.jar@ and click *OK*.

p(note). **Do not commit the .iml files when you work in a team!**

The generated configuration files contains absolute references to your framework installation. These are specific to your own installation. When you work in a team on the same application, each developer must keep his IntelliJ IDEA configuration files private.


h2(#textmate). <a>Textmate</a>

Install the "Textmate":http://macromates.com/ bundle provided at @$PLAY_HOME/support/textmate.zip@ to enable syntax coloring and auto-completion. The bundle also eases navigation between controllers and views.

!images/editor!


h2(#vim). <a>Vim</a>

Inspired by Textmate, the "snipMate":http://www.vim.org/scripts/script.php?script_id=2540 plug-in provides keyword auto-completion in "Vim":http://www.vim.org/. Play provides snippets files for HTML and Java: to use them, install snipMate and copy @$PLAY_HOME/support/vim/*.snippets@ to @~/.vim/snippets/@.


h2(#custom). <a>Custom configuration</a>

As Play applications are standard Java applications, you don’t need a specific plug-in to work with your preferred editor. This, however, requires a little bit of knowledge of how Play works.

h3. Classpath settings

A Play application classpath is built as follows (in this order):

* The @conf/@ directory for the application
* The @$PLAY_PATH/framework/play-$version.jar@
* All JAR files found in your application’s @lib/@ directory
* All JAR files found in the @$PLAY_PATH/framework/lib/@ directory

p(note). *Tip*

If you have any modules enabled, you will need to add all modules’ libraries (from the @$module/lib/@ directory) to the classpath as well.


h3. Main class to run

To start a Play application, just run the @play.server.Server@ class. Play uses the @"application.path"@ system property to locate the application to run. Typically you pass this value with:

bc. java -Dapplication.path="/app/path"…


h3. Java agent

To enable HotSwap reloading you have to load a Java agent packaged in the @play.jar@ library. Typically like this:

bc. java -javaagent:"$PLAY_PATH/framework/play.jar" …

It’s not required, but will speed-up class reloading when it is possible.


h2. <a>Debugging issues</a>

Play automatically reloads Java classes when the Java sources are modified. However as Java does not fully support class reloading, the JDPA debugger can easily get confused: breakpoint submission may fail or the debugger may stop on the wrong line when you step into the code.

To avoid this behavior, a better way is to start a fresh debugging session after a code modification. Luckily, JPDA supports the ability to connect and disconnect the debugger at any time without restarting the JVM.

So the correct workflow for debugging is:

# <span>Make changes to your source code.</span>
# <span>Refresh the browser to see the results. (At this time Play will reload your code modifications and redefine classes in the JVM.)</span>
# <span>If something goes wrong and you need to debug, start a new debug session.</span>
# <span>Debug and correct your code.</span>
# <span>Disconnect the debugger.</span>

By using this work-flow you will always have a debugger synchronized with the code loaded in the JVM.

p(note). Próximo: %(next)"Tutorial ‘Hello World’":firstapp%.
