h1. Visão geral do Play framework

O framework Play é uma alternativa limpa para as opções Enterprise Java infladas.
Ele foca na produtividade do desenvolvedor para as arquiteturas RESTful.
O Play é o companheiro perfeito para o *desenvolvimento de software ágil*.

O objetico do framework Play é facilitar o desenvolvimento de aplicações com Java. Vamos ver como isso é possível.

p(note). **Quer ver um pouco de código ?**

Veja também "Cinco coisas legais que você pode fazer com play":5things, ou comece direto com "tutorial hello world":firstapp.


h2. <a name="java">Um framework Java sem dor</a>

O Play é um framework em Java puro que permite você usar suas ferramentas e bibliotecas preferidas.

Se você usa Java como plataforma de desenvolvimento, você não precisa mudar para outra linguagem, outra IDE e outras bibliotecas.

*Apenas mude para um ambiente Java mais produtivo!*

h2. <a name="reload">Arrume o bug e faça um reload</a>

A plataforma Java EE tem a fama de ter baixa produtividade no desenvolvimento de aplicações web, basicamente por repetidos e tediosos ciclos de compilar-empacotar-publicar.

Isso é porque nós repensamos o ciclo de deenvolvimento para fazer o desenvolvimento com Play um processo eficiente.

O framework compila seus fontes Java diretamente e publica automaticamente (hot-reloads) na JVM sem a necessidade de reiniciar o servidor.
Você pode editar, fazer o reload e ver suas modificações imediatamente, assim como nos ambientes <a href="http://en.wikipedia.org/wiki/LAMP_(software_bundle)">LAMP</a> ou <a href="http://en.wikipedia.org/wiki/Ruby_on_Rails">Rails</a>.

É tão divertido que você pode rtabalhar com um simples editor de texto e evitar uma IDE Java completa se quiser.

!images/editor!

Sempre que um erro ocorre, o framework faz o possível para identificar o que aconteceu e mostra o problema.

!images/guide1-3!

Até mesmo a stack trace é reduzida e otimizada para facilitar a resolução dos problemas.
Veja como a e execução de template é bem integrada com a stack trace do Java.

!images/stacktrace!

h2. <a>Uma simples arquitetura MVC stateless</a>

Você tem um banco de dados de um lado e um web browser no outro. Por que manter um estado entre eles ?

Os framweworks web Java stateful e baseados em componentes facilitam manter o estado da página, mas isso traz vários outros problemas: o que acontece quando o usuário abre uma segunda janela ? E se o usuário pressionar o botão voltar?

A "arquitetura Share Nothing":http://zef.me/883/the-share-nothing-architecture é promovida por vários frameworks web de PHP até Ruby on Rails ou Django.
O browser torna-se cada vezz mais poderoso, e agora é fácil de usar Ajax ou offline storage para resolver problema de gravar estado no lado do cliente.

Nós não precisamos hackear mais o modelo HTTP para refazer um falso estado na Web.
Outro aspecto do ‘share nothing’ é facilitar para renderizar pedaços da página em paralelo, e fazer atualizações parciais de páginas (ou melhorias progressivas).


h2. <a name="http">Mapeamendo HTTP-to-code</a>

Se você já usou algum framework web Java como o  Servlet API ou o Struts framework, você já usou uma visão abstrata do protocolo HTTP com APIs estranhas do Java APIs e seus conceitos.
Nós pensamos diferente.
Um framework web deve te dar acesso total e direto ao HTTP e seus conceitos. Essa a diferença fundamental entre Play e outros frameworks web Java.

O HTTP, o padrão de Request/Response, o estilo arquitetural de REST, a negociação de content-type, a URI são coneitos principais do framework Play.

Por exemplo, relacionar um padrão de URI para uma chamada Java é feito em apenas uma linha:

bc. GET    /clients/{id}        Clients.show

Se Ajax, REST e manipular movimento back/forward entre páginas web  é algumas de suas tarefas do seu dia a dia de desenvolvimento web, experimente o Play.


h2. <a name="templates">Engine de template eficiente</a>


Nós gostamos da ideia do JSP e sua expression language.
Mas por que precisamos de tantos arquivos de configuração para criar uma biblioteca de tag ?
Por que nõa podemos ter acesso completo ao modelo de objetos ?
O JSP tem diversas limitações e isso é muito frustrante.
É por isso que criamos um sistema de templates customizado, inspirado no JSP mas sem suas restrições!

Você e qualquer um pode estar cansado de escrever algo assim:

bc. <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>
<c:choose>
    <c:when test="${emails.unread != null && fn:size(emails.unread)}">
        You have ${fn:size(emails.unread)} unread email(s)!
    </c:when>
    <c:otherwise>
        You have no unread emails!
    </c:otherwise>
</c:choose>

Nós achamos que você deve preferir algo assim:

bc. You have ${emails.unread ?: 'no'} ${emails.unread?.pluralize('email')} !

A expression language usada pela engine de template do Play é o "Groovy":http://groovy.codehaus.org/, que tem uma sintaxe consistente com o Java.
Enquanto o Play usa o sistema de templates para renderizar respostas HTML, você pode usar também para gerar outros documentos como mensagens de e-mail messages, respostas JSON, etc.


h2. <a>JPA em esteroides</a>

O Java Persistence API (JPA) é o mapeamento objeto-relacional (ORM) mais limpo disponível para Java.
Se você já conhece vai ficar surpreso de como ele ficou mais simples com Play.
Com nada para configurar , o Play automaticamente sobe um JPA Entity Manager e sincroniza enquanto o código é carregado.

Ainda mais se você usar a super classe @play.db.jpa.Model@ para ficar mais simples ainda. Dê uma olhada:

bc. public static void messages(int page) {
    User connectedUser = User.find("byEmail", connected()).first();
    List<Message> messages = Message.find(
        "user = ? and read = false order by date desc",
        connectedUser
    ).from(page * 10).fetch(10);
    render(connectedUser, messages);
}

h2. <a>Test driven development (se você quiser)</a>

O executador de testes integrados facilita fazer <a href="http://en.wikipedia.org/wiki/Test-driven_development">test-driven development</a>.
Você pode escrever todos os tipos de teste, de um simples teste unitário para um teste completo integrado, e roda-los diretamente do browser
usando "Selenium":http://seleniumhq.org/. A cobertura de códigos testados também é medida.

!images/guide2-2!

h2. <a name="full-stack">Full-stack application framework</a>

O framework Play foi inspirado pelas nossas próprias aplicações Java. Ele tem todas as ferramentas necessárias para criar uma aplicação web moderna, incluindo:

* suporte a banco de dados relacionais através do JDBC.
* mapeamento objeto-relacional usando Hibernate (com a API do JPA).
* suporte a cache integrado, com a facilidade de uso do sistema distribuído do memcached se necessário.
* web services simples e diretos consumidos em JSON ou XML (estamos falando de *verdadeiros* web services ; e não de SOAP).
* suporte ao OpenID para autenticação distribuída.
* sua aplicação web já pode ser publicada em qualquer lugar (servidor de aplicação, Google App Engine, nas nuvens, etc…)
* API para manipular imagens.

A arquitetura modular deixa você combinar a aplicação web com várias outras.
Graças aos "módulos de aplicação":modules, você pode reutilizar todo o seu código Java, templates e recursos estáticos (assim como arquivos JavaScript e CSS) de um jeito simples.

p(note). **Experimente**

"Instale o framework Play":install e comece a desenvolver a sua primeira aplicação.
