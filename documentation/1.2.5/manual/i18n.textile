h1. Internacionalização

Internacionalização (I18N) significa adaptar a sua aplicação para diferentes idiomas para diferentes regiões. Siga esses passos
para ativar a internacionalização na sua aplicação.

h2. <a name="utf8">Use apenas UTF-8!</a>

Play supporta apenas um encoding: UTF-8.
Como os problemas de encoding são estranhos e complicados de resolver, nós escolhemos suportar apenas um encoding.
O UTF-8 permite exibir todos os caracteres em todos os idiomas.


Certifique-se que está usando UTF-8 usage corretamente em sua aplicação:

* Edite todos os seus arquivos fonte em UTF-8
* Defina os cabeçalhos adeuados no HTTP
* Defina as suas meta tags do HTML com UTF-8
* Se você utiliza um banco de dados, configure para usar UTF-8, e sempre conecte usando UTF-8

p(note). **Nota**

O detalhe do encoding em UTF-8 é a razão do porquê das arquivos de configuração do Play, mesmo os que estão em arquivos properties do Java,não são chamados de @*.properties@.
O Java obriga que os arquivos properties utilizem o encoding **ISO-8859-1**.
Os arquivos de configuração devem utilizar UTF-8. Precisa falar mais alguma coisa?

h2. <a name="messages">Extraia suas mensagens</a>

Para utilizar o I18N você deve extrair todas as mensagens de sua aplicação.

Crie um arquivo chamado @messages@ no diretório @conf/@ de sua aplicação.
Na verdade esse arquivo é apenas um arquivo properties do Java.

bc. hello=Hello!
back=Back

Você pode definir um arquivo @message@ para cada idioma de sua aplicação.
Apenas adicione o código ISO do idioma como extensão do arquivo.

Por exemplo, o arquivo de mensagem correspondente às traduções em português é @conf/messages.pt@:

bc. hello=Oi!
back=Voltar

h2. <a name="languages">Defina os idiomas suportados pela aplicação</a>

Defina a lista dos idiomas suportados em "application.langs configuration":configuration#application.langs.

Na primeira chamada de um novo usuário, o Play tentará adivinhar o idioma que ele usa. Ele consegue isso fazendo um parse no cabeçalho HTTP do @Accept-language@.
Ele vai gravar o idioma escolhido em um cookie  @PLAY_LANG@ . Na próxima requisição ele vai usar o mesmo idioma.

Você pode usar o par idioma/país se desejar diferenciar entre variáveis como en_US e en_GB, ou zh_CN e zh_TW. Entretanto,
lembre-se que alguns usuários pode expor somente o idiioma e não o país em seu Accept-language. Poe esse motivo, você deve sempre disponibilizar o idioma simplificado (exemplo: pt ou en) .

Por exemplo, a maioria dos usuários são dos Estados Unidos, mas talvez você queira ter a opção de inglês britânico, portanto é recomendável que use apenas "en" para o inglês americano e "en_GB" para o britânico.

Do código de sua aplicação é possível obter o idioma corrente com o objeto @play.i18n.Lang@ :

bc. String lang = Lang.get();

Se desejar mudar o idioma permanentemente, use o método change():

bc. Lang.change("ja");

O novo valor será gravado no cookie do idioma do usuário.


h2. <a name="dates">Defina o formato de data de acordo com o seu locale</a>

Configure o "date.format":configuration#date.format para especificar o formato padrão de data para usar.


h2(#retrieve). <a>Buscar mensagens traduzidas</a>


h3(#argument). Messagens nos argumentos

Do código fonte da aplicação, você pode buscar mensagens definidas no arquivo de mensagens. Do Java, use o objeto @play.i18n.Messages@ .

bc. public static void hello() {
    renderText(Messages.get("hello"));
}

Nós suportamos o formato através do padrão @java.util.Formatter@ ‘Format string’. Você também pode definir o conteúdo das mensagens dinamicamente:

bc. hello=Hello %s!

onde @%s@ representa o argumento da mensagem que sairá como uma @String@. O argumento da mensagem é disponivel via argumento varargs para o @Messages.get@:

bc. public static void hello(String user) {
    renderText(Messages.get("hello", user));
}


h3(#template). Saída com Template

De um template você pode usar a sintaxe @&{…}@ para exibir as mensagens traduzidas:

bc. <h1>&{'hello'}</h1>

ou usando um conteúdo dinâmico como argumento:

bc. <h1>&{'hello', params.user}</h1>


h3(#arguments). Argumentos múltiplos

Você pode definir vários argumentos na mensagem,como essa mensagem que se refere a dois argumentos numéricos:

bc. guess=Escolha um número entre %d e %d

onde você mostra os valores usando os argumento na ordem correta:

bc. <p>&{'guess', numeroMenor, numeroMaior}</p>


h3(#indices). Argumentos com índice

Você também pode especificar um argumento de mensagem explicitamente para usar uma ordem diferente.
Por exemplo, suponha uma mensagem em inglês com dois parâmetros:

bc. guess.characteristic=Guess %s’s %s.

com a saída da mensagem assim:

bc. <p>&{'guess.characteristic', person.name, 'age'}</p>

A tradução em francês teria a mensagem na ordem contrária, portanto especificamos com argumentos com índices:

bc. guess.characteristic=Devinez %2$s de %1$s.

onde  @%2$s@ exibe o **segundo** argumento com um número inteiro.

Finalmente, se quiser traduzir o nome ‘age’, precisamos mudar a saída da mensagem @person.age@, mudando as definições para:

bc. guess.characteristic=Guess %s’s &{%s}.
person.age = age

e

bc. guess.characteristic=Devinez &{%2$s} de %1$s.
person.age = l’age

onde @&{%s}@ é a busca de mensagens própria, com o valor do argumento como chave da mensagem.

p(note). **Continuando com a discussão**

Next: %(next)"Cache":cache%.
