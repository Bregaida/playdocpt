h1. Ajax no Play framework

O Play framework permite que você facilmente use requisições Ajax, e é disponibilizado com o "jQuery":http://jquery.com por padrão.
Essa seção cescreved como utilizar de maneira eficaz o "jQuery":http://jquery.com junto com o framework.

O Play framework também acompanha a tag "jsAction":tags#jsaction para ter a definição do método do controller de maneira transparente.

h2. <a name="jsaction">Usando o jQuery com a tag jsAction</a>

A tag @#{jsAction /}@ retorna a função JavaScript que monta uma URL baseada na action do servidor e suas variáveis.

Ele não faz a requisição AJAX; isso deve ser feito manualmente usando a URL retornada.

Vamos ver um exemplo:

bc. GET     /hotels/list        Hotels.list

Agora você pode importar essa rotina no lado do cliente:

bc. <script type="text/javascript">
   var listAction = #{jsAction @list(':search', ':size', ':page') /}
   $('#result').load(
       listAction({search: 'x', size: '10', page: '1'}),
       function() {
           $('#content').css('visibility', 'visible')
       }
   )
</script>

Nesse exemplo estamos requisitando o método list para o controller padrão Application.
Nós também estamos passando três parâmetros:  search, size e page.
A requisição é salva na variável listAction.

Agora usando jQuery e a função @load@ podemos fazer o request (na verdade um HTTP GET request).

De fato a seguinte requisição é enviada:

bc. GET /hotels/list?search=x&size=10&page=1

E assim retorna os dados em HTML.

Entretanto, é possível também retornar em formato JSON ou XML e o jQuery interpretar os dados.

No seu controller, use a método apropriado para renderizar (renderJSON, renderXML ou template XML ).

Consulte a documentação do "jQuery":http://docs.jquery.com/Main_Page  para mais informações .

Além disso perceba que poderia ser feito o POST; o método do jQuery deve ser mudado para:

bc. $.post(listAction(), function(data) {
  $('#result').html(data);
});

h2. <a name="jsaction">Usando jQuery com a tag jsRoute</a>

Para ter mais controle na rota gerada temos a tag "jsRoute":tags#jsroute , que é semelhante à  **#{jsAction /}**
mas retorna um objeto contendo a função que constroi a URL baseada na action do servidor, e o correspondente
método HTTP (GET, POST, etc.).

Examplo:

bc. PUT     /users/{id}        Users.update

E no template:

bc. <script type="text/javascript">
    var updateUserRoute = #{jsRoute @Users.update(':id') /}
    $.ajax({
      url: updateUserRoute.url({id: userId}),
      type: updateUserRoute.method,
      data: 'user.name=Guillaume'
    });
</script>

Com esse esquema, você não precisa atualizar os seus templates se decidir mudar o método HTTP no arquivo de rotas.

p(note). **Continuando a discussão**

Handle %(next)"Internacionalização":i18n%.
